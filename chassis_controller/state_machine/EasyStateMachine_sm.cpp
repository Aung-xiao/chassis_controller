//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : simple_state.sm
//


//
// a simple state machine,for learning and testing
//


#include "chassis_controller/EasyStateMachine.h"
#include "EasyStateMachine_sm.h"

using namespace statemap;

// Static class declarations.
EasyStateMachineMap_gameStart EasyStateMachineMap::gameStart("EasyStateMachineMap::gameStart", 0);
EasyStateMachineMap_Safe EasyStateMachineMap::Safe("EasyStateMachineMap::Safe", 1);
EasyStateMachineMap_Danger EasyStateMachineMap::Danger("EasyStateMachineMap::Danger", 2);

void EasyStateMachineState::processState(EasyStateMachine_sm& context)
{
    Default(context);
}

void EasyStateMachineState::Default(EasyStateMachine_sm& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void EasyStateMachineMap_Default::processState(EasyStateMachine_sm& context)
{


}

void EasyStateMachineMap_gameStart::processState(EasyStateMachine_sm& context)
{
    EasyStateMachine& ctxt = context.getOwner();

    if (!context.getOwner().car_state())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.move_forward();
            context.setState(EasyStateMachineMap::Danger);
        }
        catch (...)
        {
            context.setState(EasyStateMachineMap::Danger);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (context.getOwner().car_state())

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.move_back();
            context.setState(EasyStateMachineMap::Safe);
        }
        catch (...)
        {
            context.setState(EasyStateMachineMap::Safe);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         EasyStateMachineMap_Default::processState(context);
    }

}

void EasyStateMachineMap_Safe::processState(EasyStateMachine_sm& context)
{
    EasyStateMachine& ctxt = context.getOwner();

    if (!context.getOwner().car_state())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.move_forward();
            context.setState(EasyStateMachineMap::Danger);
        }
        catch (...)
        {
            context.setState(EasyStateMachineMap::Danger);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         EasyStateMachineMap_Default::processState(context);
    }

}

void EasyStateMachineMap_Danger::processState(EasyStateMachine_sm& context)
{
    EasyStateMachine& ctxt = context.getOwner();

    if (context.getOwner().car_state())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.move_back();
            context.setState(EasyStateMachineMap::Safe);
        }
        catch (...)
        {
            context.setState(EasyStateMachineMap::Safe);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         EasyStateMachineMap_Default::processState(context);
    }

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
