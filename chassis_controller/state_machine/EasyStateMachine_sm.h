//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : simple_state.sm
//

#ifndef EASYSTATEMACHINE_SM_H
#define EASYSTATEMACHINE_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class EasyStateMachineMap;
class EasyStateMachineMap_gameStart;
class EasyStateMachineMap_Safe;
class EasyStateMachineMap_Danger;
class EasyStateMachineMap_Default;
class EasyStateMachineState;
class EasyStateMachine_sm;
class EasyStateMachine;

class EasyStateMachineState :
    public statemap::State
{
public:

    EasyStateMachineState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(EasyStateMachine_sm&) {};
    virtual void Exit(EasyStateMachine_sm&) {};

    virtual void processState(EasyStateMachine_sm& context);

protected:

    virtual void Default(EasyStateMachine_sm& context);
};

class EasyStateMachineMap
{
public:

    static EasyStateMachineMap_gameStart gameStart;
    static EasyStateMachineMap_Safe Safe;
    static EasyStateMachineMap_Danger Danger;
};

class EasyStateMachineMap_Default :
    public EasyStateMachineState
{
public:

    EasyStateMachineMap_Default(const char * const name, const int stateId)
    : EasyStateMachineState(name, stateId)
    {};

    virtual void processState(EasyStateMachine_sm& context);
};

class EasyStateMachineMap_gameStart :
    public EasyStateMachineMap_Default
{
public:
    EasyStateMachineMap_gameStart(const char * const name, const int stateId)
    : EasyStateMachineMap_Default(name, stateId)
    {};

    virtual void processState(EasyStateMachine_sm& context);
};

class EasyStateMachineMap_Safe :
    public EasyStateMachineMap_Default
{
public:
    EasyStateMachineMap_Safe(const char * const name, const int stateId)
    : EasyStateMachineMap_Default(name, stateId)
    {};

    virtual void processState(EasyStateMachine_sm& context);
};

class EasyStateMachineMap_Danger :
    public EasyStateMachineMap_Default
{
public:
    EasyStateMachineMap_Danger(const char * const name, const int stateId)
    : EasyStateMachineMap_Default(name, stateId)
    {};

    virtual void processState(EasyStateMachine_sm& context);
};

class EasyStateMachine_sm :
    public statemap::FSMContext
{
public:

    explicit EasyStateMachine_sm(EasyStateMachine& owner)
    : FSMContext(EasyStateMachineMap::gameStart),
      _owner(owner)
    {};

    EasyStateMachine_sm(EasyStateMachine& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline EasyStateMachine& getOwner()
    {
        return (_owner);
    };

    inline EasyStateMachineState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<EasyStateMachineState&>(*_state);
    };

    inline void processState()
    {
        getState().processState(*this);
    };

private:
    EasyStateMachine& _owner;
};


#endif // EASYSTATEMACHINE_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
